//incluir os motores
#include <Servo.h>

// declarar as variaveis do TRF05 - sensor frontal
int TrigPin = 7;
int EcoPin = 8;

//variaveis do Ping Prallax - sensor lateral
const int PingPin = A1;

//sensor LV
//int LV = A5;

//Duração
long durationTRF;
long durationPing;

//distancia
int cmTRF;
int cmPing;
//int cmLV;

int Led = 2;
Servo motorE;
//motor esquerda
Servo motorD;
//motor direita

bool ligarPing = true;
 
 
 void setup() {
  
  pinMode(TrigPin,OUTPUT);
  pinMode(EcoPin,INPUT);
  
  pinMode(Led, OUTPUT);
  
  pinMode(A0, OUTPUT);
  digitalWrite(A0,HIGH);

  Serial.begin(9600);

}

void loop() {

  leituraTRF();
  leituraPing();
  //cmLV = analogRead(LV)/2;
  
  //sinal recebido do app ao TRF
  byte cmd = Serial.read();
  
  if (cmTRF > 25){
    cmTRF = 26;
  }
  if (cmTRF <26){
    cmTRF = 15;
  }
  if(cmPing > 26 && ligarPing == true){
    cmTRF = 40;
  }
  if(cmPing <27 && ligarPing == false){
    ligarPing = true;
    digitalWrite(2,HIGH);   
  }
  
  byte dataToSent;
    dataToSent = (byte)cmTRF;
    Serial.write(dataToSent);
    Serial.println();

    Serial.print("frontal: ");
    Serial.println(cmTRF);
    Serial.print("lateral direita: ");
    Serial.println(cmPing);
    //Serial.print("lateral esquerda: ");
    //Serial.println(cmLV);
   
  //delay para receber os sinais dos sensores TRF e Ping
  delay(750);

  switch(cmd){
      case (0x01):
      //Led on
        digitalWrite(2,HIGH);
        break;
        
      case (0x02):
      //Led off
        digitalWrite(2,LOW);
        break;
        
      case(0x03):
      //Frente
        motorE.attach(13);
        motorD.attach(12);
        motorE.writeMicroseconds(1555);
        //1555
        //1525 (atras) e 1545
        motorD.writeMicroseconds(1500);
        //1500
        //1530 atras e 1512
        break;
        
      case(0x04):
      //Direita
        digitalWrite(2,LOW);
        motorE.attach(13);
        motorD.attach(12);
        motorE.writeMicroseconds(1547);
        motorD.writeMicroseconds(1510);
        delay(300);
        motorE.writeMicroseconds(1590);
        motorD.writeMicroseconds(1555);
        digitalWrite(2,HIGH);
        delay(1000);
        digitalWrite(2,LOW);
        motorE.detach();
        motorD.detach();
        ligarPing = false;
        break;
        
      case(0x05):
      //Esquerda
        motorE.attach(13);
        motorD.attach(12);
        motorE.writeMicroseconds(1490);
        motorD.writeMicroseconds(1473);
        delay(1000);
        motorE.detach();
        motorD.detach();
        break;
        
      case(0x06):
      //Ré
        digitalWrite(2,LOW);
        motorE.attach(13);
        motorD.attach(12);
        motorE.writeMicroseconds(-1700);
        motorD.writeMicroseconds(1700);
        digitalWrite(2,HIGH);
        break;
        
      case(0x07):
      //Parar
        motorE.detach();
        motorD.detach();
        break;

      case (0x0b):
      //180º
        motorE.attach(13);
        motorD.attach(12);
        motorE.writeMicroseconds(1700);
        motorD.writeMicroseconds(1700);
        delay(1700);
        motorE.detach();
        motorD.detach();
        break;
    }
}



//o valor medido pelo sensor TRF05
int leituraTRF(){
  
  digitalWrite(TrigPin, LOW); 
  delayMicroseconds(2);
  digitalWrite(TrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin, LOW);
  
  //pinMode(EcoPin, INPUT);
  durationTRF = pulseIn(EcoPin,HIGH);
  //long distanceTRF_cm = distanceTRF(durationTRF);

  cmTRF = distanceTRF(durationTRF);
  return cmTRF;
}


long distanceTRF(long time){
  //Calcular distancia do TRF05
  
  long distanceCalcTRF;
  distanceCalcTRF = (((time /2.9)/2)/10);
  return distanceCalcTRF;
 }


//o valor medido pelo sensor Ping
int leituraPing(){
  
  pinMode(PingPin, OUTPUT);
  digitalWrite(PingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(PingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(PingPin, LOW);
  pinMode(PingPin, INPUT);
  
  durationPing = pulseIn(PingPin,HIGH);
  
  cmPing = distancePing (durationPing);
  return cmPing;
}

long distancePing (long microseconds){
  return microseconds / 29 / 2;
}
